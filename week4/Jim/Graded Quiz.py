'''
11027147邱峻彥 11027140陳芃睿 11027250黃唯
--------------------------------------------------------------------------------------------------------------------------------
題目描述:
在本題中，我們承接第一題的報童問題，但現在我們不想根據給定的一個存貨量去計算預期利
潤；我們想要找出能最大化預期利潤的最佳訂貨量 q* ，以及在此訂貨量之下能得到的預期利潤
π(q )無條件捨去到整數位。以第一題的例子而言，就是 4 跟 18（請自己試著算算看）。如果有
數個訂貨量會導致一模一樣的預期利潤（是預期利潤一樣，不是無條件捨去之後一樣！），請用
比較小的那一個當最佳訂貨量。
輸入輸出格式:
在每筆測試資料中，會有 N+4 列，每一列都有一個數字。第一列的整數是單位進貨成本 c 、第
二列的整數是單位零售價格 r 、第三列的整數是需求的可能個數 N 、第四列開始的小數則依序是
賣出零份、一份直到 N 份報紙的機率（也就是說對於 i = 4, 5, ..., N + 4 ，第 i 列記錄的是賣出
i -4份報紙的機率）。已知 c 會落在 1 到 100 之間（包含 1 跟 100）、 r 會落在 1 到 100 之間（包
含 1 跟 100）、 r 不會比 c 小、 N 一定會是 8。此外，對於i = 0, 1, ..., N ，pi會介於 0 到 1 之間
（包含 0 跟 1）、最多只有兩位小數。
讀入這些資料之後，你會計算最佳訂購量 q∗ ，以及在此訂購量下的預期利潤無條件捨去到整數
⌊π(q )⌋，並且在兩者中間用一個空格隔開。
--------------------------------------------------------------------------------------------------------------------------------
根據題目規定，需找出能最大化預期利潤的最佳訂貨量 q*，以及在此訂貨量之下能得到的預期利潤 π(q) 無條件捨去到整數位。

程式碼的執行流程如下：

1. 首先，讀取單位進貨成本 c、單位零售價格 r、需求的可能個數 N。

2. 接著，使用迴圈讀取每種需求個數的機率 pi，並將這些機率依序存入 pi 列表中。

3. 初始化 max_profit 變數為 0，用來儲存最大的期望利潤。

4. 接下來的迴圈中，程式會計算每種訂購量 q 下的預期利潤 profit。利用變數 numOfCustomers 跟踪已經購買報紙的客人數量，remaining 變數
   來追蹤未考慮到的機率（即購買量大於訂購量的機率之和）。

5. 在迴圈中，程式會檢查若現有的客人數量加上一個客人後是否小於等於訂購量。如果是，代表現有的訂購量可以滿足這一類需求，計算並累加這一類需求的預期利潤。
   並將對應機率 probability 從 remaining 減去。

6. 如果現有的客人數量加上一個客人後大於訂購量，代表部分需求的購買量會超過訂購量，這時程式會計算並累加這部分需求的預期利潤，並且停止迴圈計算。

7. 在每種訂購量 q 的迴圈中，程式會比較此訂購量下的預期利潤 profit 是否大於已知的最大預期利潤 max_profit。如果大於，則更新最大預期利潤 max_profit，
   並記錄最佳訂貨量 q*。否則代表當前的 max_profit 為最終的最大預期利潤。另外在迴圈過程中，如果 q 等於 N，代表是最大值，直接輸出。

8. 最後，在所有訂購量 q 的迴圈結束後，輸出最佳訂貨量 q* 和對應的最大預期利潤 max_profit。
   (如果有多個訂購量對應的預期利潤相同，則程式會選擇比較小的那一個作為最佳訂貨量，由第7步驟的程式邏輯可得)
--------------------------------------------------------------------------------------------------------------------------------
'''

c = int(input())  # 單位進貨成本
r = int(input())  # 單位零售價格
N = int(input())  # 需求的可能個數

pi = []
for i in range(0, N+1) :
  probability = float(input())
  pi.append(probability)

max_profit = 0.0

for q in range(0, N+1) :
  profit = 0.0
  numOfCustomers = 0
  remaining = 1.0
  for probability in pi :
    if numOfCustomers + 1 <= q :
      profit = profit + (r * numOfCustomers - c * q) * probability
      remaining = remaining - probability
    else :
      profit = profit + (r * numOfCustomers - c * q) * remaining
      break
  
    numOfCustomers += 1

  if max_profit < profit or q == 0 :
    max_profit = profit
    if q == N :
      print(q, int(max_profit))
  else :
    print(q-1, int(max_profit))
    break

